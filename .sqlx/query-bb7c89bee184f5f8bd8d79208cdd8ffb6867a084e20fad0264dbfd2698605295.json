{
  "db_name": "PostgreSQL",
  "query": "\n        WITH usage_insert AS (\n            INSERT INTO usage (\n                api_key_id, model_id, user_id, \n                total_input_cost, total_input_tokens,\n                total_output_cost, total_output_tokens\n            )\n            SELECT \n                ak.api_key_id, m.model_id, ak.user_id,\n                (m.input_price_per_token * $3)::numeric, $3,\n                (m.output_price_per_token * $4)::numeric, $4\n            FROM \n                (\n                    SELECT api_key_id, user_id \n                    FROM api_keys \n                    WHERE api_key = $1\n                ) ak,\n                (\n                    SELECT model_id, input_price_per_token, output_price_per_token \n                    FROM models \n                    WHERE model_name = $2\n                ) m\n            RETURNING \n                user_id,\n                (total_input_cost + total_output_cost)::numeric AS total_cost,\n                (total_input_tokens + total_output_tokens) AS total_tokens\n        )\n        UPDATE users u\n        SET\n            total_spent = CASE\n                WHEN date_trunc('month', u.updated_at) = date_trunc('month', now())\n                THEN (u.total_spent + ui.total_cost)::numeric\n                ELSE ui.total_cost\n            END,\n            total_tokens = CASE\n                WHEN date_trunc('month', u.updated_at) = date_trunc('month', now())\n                THEN u.total_tokens + ui.total_tokens\n                ELSE ui.total_tokens\n            END,\n            updated_at = now()\n        FROM usage_insert ui\n        WHERE u.user_id = ui.user_id\n        ",
  "describe": {
    "columns": [],
    "parameters": {
      "Left": [
        "Text",
        "Text",
        "Float8",
        "Float8"
      ]
    },
    "nullable": []
  },
  "hash": "bb7c89bee184f5f8bd8d79208cdd8ffb6867a084e20fad0264dbfd2698605295"
}
